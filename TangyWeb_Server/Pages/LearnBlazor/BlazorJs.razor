@page "/learnBlazor/blazorJs"
@inject IJSRuntime _JsRuntime

<h3>BlazorJs</h3>

<div class="row">
    <button class="btn btn-secondary m-2" style="width: 200px" @onclick="TestConfirmBox">Test Confirm</button>
</div>
<div class="row">
    <button class="btn btn-success m-2" style="width: 200px" @onclick="ToastrSuccess">Toastr Success</button>
    <button class="btn btn-danger m-2" style="width: 200px" @onclick="ToastrFailure">Toastr Failure</button>

</div>
<br />
<div class="row">
    <button class="btn btn-success m-2" style="width: 200px" @onclick="SweetAlertSuccess">Toastr Success</button>
    <button class="btn btn-danger m-2" style="width: 200px" @onclick="SweetAlertFailure">Toastr Failure</button>

</div>
<div class="row">
    @if (ConfirmResult)
    {
        <p>Confirmation has been made!</p>
    } else
    {
        <p>Confirmation Pending!</p>
    }
</div>

@code {
    private string ConfirmMessage = "Are you sure u wann click?";
    public bool ConfirmResult { get; set; }

    private async Task TestConfirmBox()
    {
        ConfirmResult = await _JsRuntime.InvokeAsync<bool>("confirm", ConfirmMessage); // asks for JS.confirm() and sends ConfirmMessage as parameter
    }
    private async Task ToastrSuccess()
    {
        await _JsRuntime.ToastrSuccess("Operation Successful");
    }
    private async Task ToastrFailure()
    {
        await _JsRuntime.ToastrError("Operation Failed");
    }
    private async Task SweetAlertSuccess()
    {
        await _JsRuntime.InvokeVoidAsync("ShowSwal","success", "Task completed successfully");
    }
    private async Task SweetAlertFailure()
    {
        await _JsRuntime.InvokeVoidAsync("ShowSwal","error", "Task failed successfully");
    }
}
